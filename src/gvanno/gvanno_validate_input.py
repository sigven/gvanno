#!/usr/bin/env python

import csv
import re
import argparse
import os
import subprocess
import logging
import sys
import annoutils
import pandas as np
from cyvcf2 import VCF

def __main__():
   
   parser = argparse.ArgumentParser(description='Verify input data for gvanno')
   parser.add_argument('gvanno_dir',help='Docker location of gvanno base directory with accompanying data directory, e.g. /data')
   parser.add_argument('input_vcf', help='VCF input file with query variants (SNVs/InDels)')
   parser.add_argument('vcf_validation',type=int, help="Perform VCF validation with Ensembl's vcf-validator")
   parser.add_argument('genome_assembly',help='grch37 or grch38')
   parser.add_argument('--output_dir', dest='output_dir', help='Output directory', default='/workdir/output')


   args = parser.parse_args()
   
   ret = validate_gvanno_input(args.gvanno_dir, args.input_vcf, args.vcf_validation, args.genome_assembly, args.output_dir)
   if ret != 0:
      sys.exit(-1)

def check_existing_vcf_info_tags(input_vcf, gvanno_directory, genome_assembly, logger):
   
   """
   Function that compares the INFO tags in the query VCF and the INFO tags generated by gvanno
   If any coinciding tags, an error will be returned
   """
   
   gvanno_infotags_desc = annoutils.read_infotag_file(os.path.join(gvanno_directory,'data',genome_assembly,'gvanno_infotags.tsv'))
         
   vcf = VCF(input_vcf)
   logger.info('Checking if existing INFO tags of query VCF file coincide with gvanno INFO tags')
   ret = 1
   for e in vcf.header_iter():
      header_element = e.info()
      if 'ID' in header_element.keys() and 'HeaderType' in header_element.keys():
         if header_element['HeaderType'] == 'INFO':
            if header_element['ID'] in gvanno_infotags_desc.keys():
               err_msg = 'INFO tag ' + str(header_element['ID']) + ' in the query VCF coincides with a VCF annotation tag produced by gvanno - please remove or rename this tag in your query VCF'
               return annoutils.error_message(err_msg, logger)
   
   logger.info('No query VCF INFO tags coincide with gvanno INFO tags')
   return ret

def simplify_vcf(input_vcf, vcf, output_dir, logger):
   
   """
   Function that performs tre things on the validated input VCF:
   1. Strip of any genotype data
   2. If VCF have variants with multiple alternative alleles ("multiallelic", e.g. 'A,T'), these are decomposed into variants with a single alternative allele
   3. Final VCF file is sorted and indexed (bgzip + tabix)
   """
   
   input_vcf_gvanno_ready = os.path.join(output_dir, re.sub(r'(\.vcf$|\.vcf\.gz$)','.gvanno_ready.tmp.vcf',os.path.basename(input_vcf)))
   input_vcf_gvanno_ready_decomposed = os.path.join(output_dir, re.sub(r'(\.vcf$|\.vcf\.gz$)','.gvanno_ready.vcf',os.path.basename(input_vcf)))
   
   multiallelic_alt = 0
   for rec in vcf:
      POS = rec.start + 1
      alt = ",".join(str(n) for n in rec.ALT)
      if len(rec.ALT) > 1:
         logger.warning("Multiallelic site detected:" + str(rec.CHROM) + '\t' + str(POS) + '\t' + str(rec.REF) + '\t' + str(alt))
         multiallelic_alt = 1
   
   command_vcf_sample_free1 = 'egrep \'^#\' ' + str(input_vcf) + ' > ' + str(input_vcf_gvanno_ready)
   command_vcf_sample_free2 = 'egrep -v \'^#\' ' + str(input_vcf) + ' | sed \'s/^chr//\' | egrep \'^[0-9]\' | sort -k1,1n -k2,2n -k3,3 -k4,4 >> ' + str(input_vcf_gvanno_ready)
   command_vcf_sample_free3 = 'egrep -v \'^#\' ' + str(input_vcf) + ' | sed \'s/^chr//\' | egrep -v \'^[0-9]\' | egrep \'^[XYM]\' | sort -k1,1 -k2,2n -k3,3 -k4,4 >> ' + str(input_vcf_gvanno_ready)
   command_vcf_sample_free4 = 'egrep -v \'^#\' ' + str(input_vcf) + ' | sed \'s/^chr//\' | egrep -v \'^[0-9]\' | egrep -v \'^[XYM]\' | sort -k1,1 -k2,2n -k3,3 -k4,4 >> ' + str(input_vcf_gvanno_ready)
   if input_vcf.endswith('.gz'):
      command_vcf_sample_free1 = 'bgzip -dc ' + str(input_vcf) + ' | egrep \'^#\' > ' + str(input_vcf_gvanno_ready)
      command_vcf_sample_free2 = 'bgzip -dc ' + str(input_vcf) + ' | egrep -v \'^#\' | sed \'s/^chr//\' | egrep \'^[0-9]\' | sort -k1,1n -k2,2n -k3,3 -k4,4 >> ' + str(input_vcf_gvanno_ready)
      command_vcf_sample_free3 = 'bgzip -dc ' + str(input_vcf) + ' | egrep -v \'^#\' | sed \'s/^chr//\' | egrep -v \'^[0-9]\' | egrep \'^[XYM]\' | sort -k1,1 -k2,2n -k3,3 -k4,4 >> ' + str(input_vcf_gvanno_ready)
      command_vcf_sample_free4 = 'bgzip -dc ' + str(input_vcf) + ' | egrep -v \'^#\' | sed \'s/^chr//\' | egrep -v \'^[0-9]\' | egrep -v \'^[XYM]\' | sort -k1,1 -k2,2n -k3,3 -k4,4 >> ' + str(input_vcf_gvanno_ready)
   
   os.system(command_vcf_sample_free1)
   os.system(command_vcf_sample_free2)
   os.system(command_vcf_sample_free3)
   os.system(command_vcf_sample_free4)

   if multiallelic_alt == 1:
      logger.info('Decomposing multi-allelic sites in input VCF file using \'vt decompose\'')
      command_decompose = 'vt decompose -s ' + str(input_vcf_gvanno_ready) + ' > ' + str(input_vcf_gvanno_ready_decomposed) + ' 2> ' + os.path.join(output_dir, 'decompose.log')
      os.system(command_decompose)
   else:
      command_copy = 'cp ' + str(input_vcf_gvanno_ready) + ' ' + str(input_vcf_gvanno_ready_decomposed)
      os.system(command_copy)
   os.system('bgzip -f ' + str(input_vcf_gvanno_ready_decomposed))
   os.system('tabix -p vcf ' + str(input_vcf_gvanno_ready_decomposed) + '.gz')
   os.system('rm -f ' + str(input_vcf_gvanno_ready) + ' /workdir/output/decompose.log')

def validate_gvanno_input(gvanno_directory, input_vcf, vcf_validation, genome_assembly, output_dir):
   """
   Function that reads the input file to gvanno (VCF file) and performs the following checks:
   1. Check that VCF file is properly formatted (according to EBIvariation/vcf-validator - VCF v4.2)
   2. Check that no INFO annotation tags in the query VCF coincides with those generated by gvanno
   3. Check that if VCF have variants with multiple alternative alleles (e.g. 'A,T') run vt decompose
   4. Any genotype data from VCF input file is stripped, and the resulting VCF file is sorted and indexed (bgzip + tabix) 
   """
   logger = annoutils.getlogger('gvanno-validate-input')

   if not input_vcf == 'None':
      if vcf_validation == 1:
         valid_vcf = annoutils.is_valid_vcf(input_vcf, output_dir, logger, False)
         if valid_vcf == -1:
            return -1
      else:
         logger.info('Skipping validation of VCF file - as provided by option --no_vcf_validate')
      tag_check = check_existing_vcf_info_tags(input_vcf, gvanno_directory, genome_assembly, logger)
      if tag_check == -1:
         return -1
      
      vcf = VCF(input_vcf)
      simplify_vcf(input_vcf, vcf, output_dir, logger)
   
   return 0
   
if __name__=="__main__": __main__()

